[
    {
        "id": "seed_task_0",
        "name": "python_code_review_01",
        "instruction": "Perform a code review on the given Python code file to improve the code in terms of readability, uniformity, understandability, correctness, performance, and security.",
        "instances": [
            {
                "input": "```\ndef Add_numbers(a,b):\n    Sum=a+b\n    return Sum\n\ndef Multiply_numbers(a, b):\n    Product = a*b\n    Return Product\n\ndef subtract_numbers(a, b):\n    difference = a - b\n    return difference\n\ndef divide_numbers(a, b):\n    if b != 0:\n        quotient = a / b\n        return quotient\n    else:\n        print(\"Error: Cannot divide by zero\")\n\nx = 5\ny = 0\n\nresult1 = Add_numbers(x, y)\nprint(\"Sum:\", result1)\n\nresult2 = Multiply_numbers(x, y)\nprint(\"Product:\", result2)\n\nresult3 = subtract_numbers(x, y)\nprint(\"Difference:\", result3)\n\nresult4 = divide_numbers(x, y)\nprint(\"Quotient:\", result4)\n```",
                "output": "- Readability (Status: NEGATIVE)\n  - Function names should follow `lower_case_with_underscore` naming convention.\n  - Inconsistent capitalization of variable names.\n  - Inconsistent capitalization of return statements.\n  - Missing space before and after operators.\n- Uniformity (Status: NEGATIVE)\n  - Inconsistent spacing around operators.\n  - Inconsistent capitalization of function names.\n- Understandability (Status: NEGATIVE)\n  - The purpose of each function and its parameters is not well-documented.\n  - The error handling for dividing by zero is not clearly explained in the code.\n- Correctness (Status: POSITIVE)\n  - The code appears to be correct.\n- Performance (Status: POSITIVE)\n  - No performance issues identified.\n- Security (Status: POSITIVE)\n  - No security issues identified."
            }
        ],
        "is_classification": false
    },
    {
        "id": "seed_task_1",
        "name": "python_code_review_02",
        "instruction": "Perform a code review on the given Python code file and provide feedback on the following factors: readability, uniformity, understandability, correctness, performance, and security.",
        "instances": [
            {
                "input": "```\ndef calculate_area(radius):\n    import math\n    # Check if radius is a positive number\n    if radius <= 0:\n        return \"Invalid radius. Please provide a positive number.\"\n    # Calculate the area\n    area = math.pi * radius ** 2\n    return area\ndef calculate_circumference(radius):\n    import math\n    # Check if radius is a positive number\n    if radius <= 0:\n        return \"Invalid radius. Please provide a positive number.\"\n    # Calculate the circumference\n    circumference = 2 * math.pi * radius\n    return circumference\nradius = float(input(\"Enter the radius: \"))\narea = calculate_area(radius)\nprint(f\"The area of the circle is: {area}\")\ncircumference = calculate_circumference(radius)\nprint(f\"The circumference of the circle is: {circumference}\")\n```",
                "output": "- Readability (Status: NEGATIVE)\n  - Avoid using import statements inside functions.\n  - Add docstrings to the functions to explain their purpose and input/output.\n- Uniformity (Status: POSITIVE)\n  - No specific issues related to uniformity were found in the code.\n- Understandability (Status: POSITIVE)\n  - The code is easy to understand and follows a logical flow.\n- Correctness (Status: POSITIVE)\n  - The code correctly calculates the area and circumference of a circle.\n  - It handles invalid input by checking if the radius is a positive number.\n- Performance (Status: POSITIVE)\n  - The code performs the calculations efficiently using the math module.\n- Security (Status: POSITIVE)\n  - No security issues were identified in the code."
            }
        ],
        "is_classification": false
    },
    {
        "id": "seed_task_2",
        "name": "python_code_review_03",
        "instruction": "Perform a code review on the given Python code file to improve factors such as readability, uniformity, understandability, correctness, performance, and security.",
        "instances": [
            {
                "input": "```\nimport requests\ndef get_data(url):\n    response = requests.get(url)\n    data = response.json()\n    return data\ndef process_data(data):\n    result = []\n    for item in data:\n        if 'name' in item:\n            name = item['name']\n            result.append(name)\n    return result\ndef print_names(names):\n    for name in names:\n        print(\"Name:\", name)\nif __name__ == '__main__':\n    api_url = 'https://api.example.com/data'\n    data = get_data(api_url)\n    names = process_data(data)\n    print_names(names)\n```",
                "output": "- Readability (Status: NEGATIVE)\n  - Rename variable `url` in `get_data` function to `api_url` for consistency.\n  - Add docstrings to functions `get_data`, `process_data`, and `print_names` to explain their purpose.\n  - Use meaningful variable names instead of generic names like item in the `process_data` function.\n- Uniformity (Status: POSITIVE)\n  - The code follows PEP 8 style guidelines consistently.\n- Understandability (Status: POSITIVE)\n  - The code has clear and concise logic.\n  - Functions have descriptive names indicating their purpose.\n- Correctness (Status: POSITIVE)\n  - The code seems correct and functional, no apparent logical errors or bugs.\n- Performance (Status: POSITIVE)\n  - The code does not perform any heavy computational tasks that would - significantly impact performance.\n- Security (Status: POSITIVE)\n  - No security concerns observed in the code."
            }
        ],
        "is_classification": false
    },
    {
        "id": "seed_task_3",
        "name": "javascript_code_review_01",
        "instruction": "Perform a code review on the provided JavaScript code file and identify any issues related to the given factors (readability, uniformity, understandability, correctness, performance, and security).",
        "instances": [
            {
                "input": "```\n// Variables\nconst MAX_VALUE = 100;\nconst MIN_VALUE = 0;\nlet counter = MIN_VALUE;\n\n// Function for increasing the counter\nfunction increaseCounter(value) {\n  if (value > MAX_VALUE) {\n    throw new Error('Invalid value');\n  } else {\n    counter += value;\n  }\n}\n\n// Function for decreasing the counter\nfunction decreaseCounter(value) {\n  if (value < MIN_VALUE) {\n    throw new Error('Invalid value');\n  } else {\n    counter -= value;\n  }\n}\n\n// Function for resetting the counter\nfunction resetCounter() {\n  counter = MIN_VALUE;\n}\n```",
                "output": "- Readability (Status: POSITIVE)\n  - Variable names are clear and descriptive.\n  - Function names clearly describe their purpose.\n  - Comments are used to explain the purpose of each code section.\n- Uniformity (Status: POSITIVE)\n  - Consistent use of semicolons at the end of statements.\n  - Consistent use of curly braces for code blocks.\n- Understandability (Status: POSITIVE)\n  - Code is organized and easy to follow.\n  - Functions have clear parameters and return values.\n  - Comments provide additional explanations where necessary.\n- Correctness (Status: POSITIVE)\n  - Control flow statements (if-else) are correctly used to validate values.\n  - The counter variable is within the specified range (`MIN_VALUE` to `MAX_VALUE`).\n- Performance (Status: POSITIVE)\n  - The code doesn't involve any heavy computations or time-consuming operations.\n  - The counter updates and resets are simple and efficient.\n- Security (Status: NEGATIVE)\n  - No security vulnerabilities have been identified in the code. However, the code does not implement any specific security measures to protect the counter or prevent unauthorized access."
            }
        ],
        "is_classification": false
    },
    {
        "id": "seed_task_4",
        "name": "javascript_code_review_02",
        "instruction": "Perform a code review on the provided JavaScript code file and identify any issues related to readability, uniformity, understandability, correctness, performance, and security.",
        "instances": [
            {
                "input": "```\nfunction A(f){\n    const B = [1,2,3];\n    const c = B.length;\n    let D = 0;\n    for (let i=0;i<c;i++){\n        D+=B[i];\n    }\n    const e=f+D;\n    return e;\n}\nfunction calculate(x, y){\n    if(x > 10){\n        return y * 2;\n    }\n    else{\n        if(y < 5){\n            return x * y;\n        }\n        else{\n            return x + y;\n        }\n    }\n}\nfunction divide(a, b){\n    if(b !== 0){\n        return a / b;\n    }\n    else{\n        return \"Error: Division by zero\";\n    }\n}\nfunction validatePassword(password){\n    if(password.length < 8){\n        return false;\n    }\n    else{\n        return true;\n    }\n}\n```",
                "output": "- Readability (Status: NEGATIVE)\n  - The code lacks consistent formatting.\n  - Variable and function names are not descriptive.\n  - Inconsistent capitalization of function names.\n- Uniformity (Status: NEGATIVE)\n  - The code does not follow a consistent naming convention for variables and functions.\n- Understandability (Status: NEGATIVE)\n  - NEGATIVEly named variables and functions make it difficult to understand their purpose.\n  - Lack of comments and documentation makes it challenging to grasp the code's intention.\n- Correctness (Status: POSITIVE)\n  - No apparent issues found related to correctness.\n- Performance (Status: POSITIVE)\n  - No apparent issues found related to performance.\n- Security (Status: NEGATIVE)\n  - The password validation function lacks proper security measures, such as checking for common weak passwords or enforcing additional complexity requirements."
            }
        ],
        "is_classification": false
    },
    {
        "id": "seed_task_5",
        "name": "javascript_code_review_03",
        "instruction": "Perform a code review on the provided JavaScript code file. Evaluate the code based on the factors of readability, uniformity, understandability, correctness, performance, and security.",
        "instances": [
            {
                "input": "```\nfunction  calculateSum() {\nlet a = 5; let b = 10; let c = 15;\nvar sum  =  a + b + c;\nconsole.log(\"The sum is: \" + sum);\n}\nfunction calculateProduct() {\n  var a = 5;\n  var b = 10;\n  var c = 15;\n  \n  var product = a * b * c;\n  \n  console.log(\"The product is: \" + product);\n}\nfunction calculateAverage() {\n  let a = 5;\n  let b = 10;\n  let c = 15;\n  \n  let average = (a + b + c) / 3;\n  \n  console.log(\"The average is: \" + average);\n}\ncalculateSum();\ncalculateProduct();\ncalculateAverage();\n```",
                "output": "- Readability (Status: NEGATIVE)\n  - Inconsistent use of variable declaration keywords (`let` and `var`).\n  - Inconsistent placement of semicolons at the end of lines.\n  - Lack of proper spacing between operators and operands reduces readability.\n- Uniformity (Status: NEGATIVE)\n  - The code lacks a consistent coding style throughout, resulting in varying indentation, spacing, and naming conventions.\n  - Inconsistent use of single and double quotes for string literals.\n  - Inconsistent use of `let` and `var` for variable declaration.\n- Understandability (Status: POSITIVE)\n  - The code is relatively straightforward and easy to understand.\n- Correctness (Status: POSITIVE)\n  - The code appears to be correct in terms of syntax and logic.\n- Performance (Status: POSITIVE)\n  - No performance-related issues were found in the code.\n- Security (Status: POSITIVE)\n  - No security vulnerabilities were found in the code."
            }
        ],
        "is_classification": false
    },
    {
        "id": "seed_task_6",
        "name": "html_css_code_review_01",
        "instruction": "Perform a code review on the given HTML/CSS code file and provide feedback on the following factors: readability, uniformity, understandability, correctness, performance, and security.",
        "instances": [
            {
                "input": "```\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Sample Page</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            font-size: 14px;\n            color: #333;\n        }\n        \n        #header {\n            background-color: #ccc;\n            padding: 20px;\n        }\n        \n        #content {\n            margin-top: 50px;\n            padding: 20px;\n        }\n        \n        .box {\n            background-color: #f0f0f0;\n            border: 1px solid #ccc;\n            padding: 10px;\n            margin-bottom: 20px;\n        }\n        \n        .box h2 {\n            font-size: 18px;\n            margin-bottom: 10px;\n        }\n        \n        .box p {\n            line-height: 1.5;\n        }\n        \n        .box .button {\n            background-color: #333;\n            color: #fff;\n            padding: 5px 10px;\n            border-radius: 3px;\n            text-decoration: none;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"header\">\n        <h1>Sample Page</h1>\n    </div>\n    <div id=\"content\">\n        <div class=\"box\">\n            <h2>Introduction</h2>\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec fringilla placerat pharetra.</p>\n        </div>\n        <div class=\"box\">\n            <h2>About</h2>\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed iaculis mollis lorem, in congue orci convallis nec.</p>\n            <a href=\"#\" class=\"button\">Learn More</a>\n        </div>\n    </div>\n</body>\n</html>\n```",
                "output": "- Readability (Status: NEGATIVE)\n  - Consider using proper line breaks and spacing between elements for better readability.\n  - Avoid inline styling and use CSS classes instead for better separation of concerns.\n- Uniformity (Status: POSITIVE)\n  - The code demonstrates uniformity in terms of naming conventions and coding style.\n- Understandability (Status: POSITIVE)\n  - The code is relatively easy to understand and follow.\n- Correctness (Status: POSITIVE)\n  - The code appears to be correct syntactically.\n- Performance (Status: POSITIVE)\n  - No performance issues found in the given code.\n- Security (Status: POSITIVE)\n  - No security issues found in the given code."
            }
        ],
        "is_classification": false
    },
    {
        "id": "seed_task_7",
        "name": "html_css_code_review_02",
        "instruction": "Perform a code review on the provided HTML/CSS code file to improve the following factors: Readability, Uniformity, Understandability, Correctness, Performance, and Security.",
        "instances": [
            {
                "input": "```\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Code Review Example</title>\n    <style>\n        body{background-color:#f0f0f0;}\n        h1{font-size:24px;color:#333;font-family:Arial;}\n        p{font-size:16px;color:#666;font-family:Arial;}\n        .container{width:960px;margin:0 auto;}\n        .header{background-color:#333;color:#fff;padding:20px;}\n        .content{background-color:#fff;padding:20px;}\n        .footer{background-color:#333;color:#fff;padding:20px;}\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>Code Review Example</h1>\n        </div>\n        <div class=\"content\">\n            <h1>Welcome to my website</h1>\n            <p>This is an example of a code review.</p>\n        </div>\n        <div class=\"footer\">\n            <p>&copy; 2023 Code Review Example. All rights reserved.</p>\n        </div>\n    </div>\n</body>\n</html>\n```",
                "output": "- Readability (Status: NEGATIVE)\n  - The lack of comments makes it difficult to understand the purpose and structure of the code. Adding comments to describe different sections or elements would improve readability.\n- Uniformity (Status: POSITIVE)\n  - The code follows a consistent naming convention for classes and IDs, using lowercase letters and hyphens to separate words. This promotes uniformity in the codebase.\n  - The use of consistent spacing around CSS selectors, properties, and values improves uniformity and makes the code easier to read.\n- Understandability (Status: POSITIVE)\n  - The structure of the code is clear and easy to understand. The elements are appropriately nested, and the purpose of each section is evident.\n  - The use of semantic HTML elements (e.g., `<header>`, `<main>`, `<footer>`) enhances the understandability of the code by providing meaning and context.\n- Correctness (Status: POSITIVE)\n  - The HTML markup is valid and adheres to the specified document type (HTML5).\n  - The CSS code follows the correct syntax and selectors, ensuring proper styling of the elements.\n- Performance (Status: POSITIVE)\n  - The code doesn't contain any obvious performance issues. However, performance can be further optimized through techniques like minification and bundling of CSS files to reduce file size and improve loading times.\n- Security (Status: POSITIVE)\n  - The code doesn't exhibit any security vulnerabilities."
            }
        ],
        "is_classification": false
    },
    {
        "id": "seed_task_8",
        "name": "html_css_code_review_03",
        "instruction": "Perform a code review on the provided HTML/CSS code file. Evaluate the code based on the following factors: readability, uniformity, understandability, correctness, performance, and security.",
        "instances": [
            {
                "input": "```\n<!DOCTYPE html>\n<html>\n<head>\n<title>My Website</title>\n<style>\n  body {\n    font-family: Arial, sans-serif;\n    font-size: 16px;\n    margin: 0;\n    padding: 0;\n  }\n  h1 {\n    color: #ff0000;\n    font-size: 24px;\n    margin-bottom: 20px;\n  }\n  .container {\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 20px;\n  }\n  .text {\n    font-weight: bold;\n  }\n  .btn {\n    background-color: #007bff;\n    color: #fff;\n    padding: 10px 20px;\n    text-decoration: none;\n  }\n  .btn:hover {\n    background-color: #0056b3;\n  }\n</style>\n</head>\n<body>\n  <div class=\"container\">\n    <h1>Welcome to My Website</h1>\n    <p class=\"text\">Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n    <a class=\"btn\" href=\"#\">Learn More</a>\n  </div>\n</body>\n</html>\n```",
                "output": "- Readability (Status: POSITIVE)\n  - The code is well-indented and uses proper spacing and line breaks, making it easy to read and understand.\n- Uniformity (Status: POSITIVE)\n  - The code follows a consistent naming convention for classes, using lowercase with hyphens. This improves uniformity and makes the code more manageable.\n- Understandability (Status: POSITIVE)\n  - The code uses semantic class names and clear HTML structure, which enhances understandability. The purpose of each element and class is evident, making it easier for developers to comprehend the codebase.\n- Correctness (Status: POSITIVE)\n  - The HTML structure is correct, starting with the doctype declaration and using the appropriate opening and closing tags. The CSS selectors are properly applied and target the intended elements.\n- Performance (Status: POSITIVE)\n  - The code doesn't contain any noticeable performance issues. However, without further information about the specific performance requirements or potential bottlenecks, it is challenging to make significant performance-related suggestions.\n- Security (Status: POSITIVE)\n  - No security issues are apparent in the provided code. However, without additional context about the application's specific security requirements, it's challenging to provide extensive security-related suggestions."
            }
        ],
        "is_classification": false
    }
]